import moment from "moment";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { ReactElement, useEffect, useState } from "react";
import useSWR from "swr";

import MainLayout from "@/components/main-layout";
import NewRelated from "@/components/news/news-related";
import { ArrowRightIcon } from "@/images/icons/product_types/icon_wrapper";
import { INews } from "@/lib/types";
import { GetStaticPaths, GetStaticPropsContext } from "next";
import { ParsedUrlQuery } from "querystring";
import {
  getDetailNewBySlug,
  getNewByCategoryId,
  listNewCategories,
} from "src/lib/api/news";
import { NextPageWithLayout } from "../../../_app";
interface IParams extends ParsedUrlQuery {
  slug: string;
}

const NewDetailPage: NextPageWithLayout = () => {
  // state
  const [params, setParams] = useState({
    skip: 0,
    limit: 4,
    categoryId: "",
    exclude_feature: 1,
    exclude_id: "",
  });
  const [newsRelated, setNewsRelated] = useState<INews[]>([]);

  // api
  const { query } = useRouter();
  const { data } = useSWR(query.slug, getDetailNewBySlug, {
    onSuccess: (data) => {
      if (data) {
        setParams((prev) => ({
          ...prev,
          exclude_id: data.id,
        }));
      }
    },
  });

  // function
  const fetchNewRelated = async () => {
    const res = await getNewByCategoryId(params);
    if (res) {
      setNewsRelated(res.data);
    }
  };

  // effect
  useEffect(() => {
    if (params.exclude_id) {
      fetchNewRelated();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [params]);

  if (!data) return null;
  return (
    <>
      <Head>
        <title>{data?.title}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="m-5">
        <div className="flex flex-row gap-4">
          <Link href={`/thong-tin-xay-dung`}>
            <span className="text-[#646464] text-base">Thông tin xây dựng</span>
          </Link>
          <ArrowRightIcon />
          <Link href={`/thong-tin-xay-dung/${data?.category?.slug}`}>
            <span className="text-[#646464] text-base">
              {data?.category?.name || ""}
            </span>
          </Link>
          <ArrowRightIcon />
          <span className="text-[#343434] text-base">{data?.title || ""}</span>
        </div>
        <div className="mt-[60px] w-full">
          <h1 className="font-semibold text-[28px] leading-[125%] text-center mb-4">
            {data?.title}
          </h1>
          <div className="font-normal text-base text-center mb-8">
            {data.created_at && moment(data.pushlish_date).format("DD/MM/YYYY")}
          </div>
          <div
            dangerouslySetInnerHTML={{ __html: data?.content || "" }}
            className="crawl-data"
          ></div>
        </div>
        {newsRelated?.length > 0 && <NewRelated data={newsRelated} />}
      </div>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const news = await getNewByCategoryId({
    skip: 0,
    limit: 12,
    categoryId: "",
    exclude_feature: 0,
    exclude_id: "",
  });
  const cates = await listNewCategories();

  if (!news || !cates) {
    return {
      paths: [],
      fallback: "blocking",
    };
  }

  // Get the paths we want to pre-render based on posts
  let paths: { params: { cslug: string; slug: string } }[] = [];
  cates.forEach((cate) => {
    const cNews = news.data.filter((n) => n?.category?.id === cate.id);
    cNews.forEach((n) => {
      paths.push({ params: { cslug: cate.slug, slug: n.slug } });
    });
  });

  return {
    paths,
    fallback: "blocking", //indicates the type of fallback
  };
};

export async function getStaticProps(context: GetStaticPropsContext) {
  const { slug } = context.params as IParams;

  const data = await getDetailNewBySlug(slug);

  if (!data) {
    return {
      notFound: true,
    };
  }
  return {
    props: {
      data,
    },
  };
}

NewDetailPage.getLayout = function getLayout(page: ReactElement) {
  return (
    <>
      <MainLayout>{page}</MainLayout>
    </>
  );
};
export default NewDetailPage;
