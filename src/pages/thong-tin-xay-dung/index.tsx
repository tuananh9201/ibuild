import { ReactElement, useEffect, useState } from "react";
import { Col, Row } from "antd";
import { useRouter } from "next/router";
import moment from "moment";
import Head from "next/head";
import useSWR from "swr";
import Link from "next/link";

import { RenderImageError } from "@/components/common";
import {
  fetchNewsForHome,
  getNewByCategoryId,
  getNewsFeature,
  listNewCategories,
} from "src/lib/api/news";
import MainLayout from "@/components/main-layout";
import NewCardLoading from "@/components/news/NewCardLoading";
import NewCardFeature from "@/components/news/new-card-feature";
import NewCardNormal from "@/components/news/news-card-normal";
import IBuildImage from "@/images/IBuildLogo.png";
import { INews } from "src/lib/types";

import { NextPageWithLayout } from "../_app";

const ThongTinXayDung: NextPageWithLayout = () => {
  const router = useRouter();
  const { query } = router;
  const { categoryName } = query;

  // state
  const [currentCategory, setCurrentCategory] = useState("");
  const [params, setParams] = useState({
    skip: 0,
    limit: 8,
    categoryId: "",
    exclude_feature: 1,
    exclude_id: "",
  });
  const [totalNew, setTotalNew] = useState(0);

  // api
  const { data: newCategories } = useSWR("category", listNewCategories);
  const { data: news, isLoading: loadingNew } = useSWR(
    params,
    getNewByCategoryId,
    {
      onSuccess: (data) => {
        if (data) {
          setTotalNew(data.paging.total);
        }
      },
    }
  );
  const { data: newsFeature, isLoading: loadingNewFeature } = useSWR(
    "newsFeature",
    getNewsFeature
  );

  // function
  const handleClickCategory = (slug: string) => {
    setCurrentCategory(slug);
    const option = newCategories?.find((ca) => ca.slug === slug);
    option &&
      setParams((prev) => ({
        ...prev,
        categoryId: option.id,
      }));
  };

  const handleClickToDetail = (news: INews | null) => {
    if (!news) return;
    router.push(
      `/thong-tin-xay-dung/${news.category?.slug || ""}/${news.slug}`
    );
  };

  useEffect(() => {
    if (categoryName) {
      setCurrentCategory(categoryName as string);
      const option = newCategories?.find((ca) => ca.slug === categoryName);
      option &&
        setParams((prev) => ({
          ...prev,
          categoryId: option.id,
        }));
    } else if (newCategories) {
      setCurrentCategory(newCategories[0]?.slug);
      setParams((prev) => ({
        ...prev,
        categoryId: newCategories[0]?.id,
      }));
    }
  }, [categoryName, newCategories]);

  if (!newCategories) return null;

  return (
    <>
      <Head>
        <title>Thông tin xây dựng</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="flex flex-col justify-start px-4 pt-[60px] pb-0">
        <section className="flex flex-col lg:flex-row justify-start p-0 gap-8 w-full">
          <div className="flex-1 flex flex-col items-start p-0 gap-6 max-w-[]">
            <div
              className="rounded-[4px] w-full cursor-pointer"
              onClick={() =>
                handleClickToDetail(newsFeature ? newsFeature[0] : null)
              }
            >
              <RenderImageError
                defaultImage={IBuildImage.src}
                image={newsFeature ? newsFeature[0]?.feature_image || "" : ""}
                width={584}
                height={358}
                title={newsFeature ? newsFeature[0]?.title || "" : ""}
                className="h-[358px] w-full rounded object-cover overflow-hidden"
              />
            </div>
            <div className="flex flex-col items-start p-0">
              <div className="text-[14px] font-medium leading-[150%] text-[#717171]">
                {newsFeature &&
                  moment(newsFeature[0].pushlish_date).format("DD/MM/YYYY")}
              </div>
              <div
                className="text-2xl font-medium not-italic leading-[150%] line-clamp-2 text-justify cursor-pointer"
                onClick={() =>
                  handleClickToDetail(newsFeature ? newsFeature[0] : null)
                }
              >
                {(newsFeature && newsFeature[0]?.title) || ""}
              </div>
            </div>
            <div className="text-base font-normal leading-[150%] text-[#717171] line-clamp-3 text-justify">
              {(newsFeature && newsFeature[0]?.intro) || ""}
            </div>
          </div>
          <div className="flex-1 flex flex-col items-start p-0 gap-8">
            {newsFeature &&
              newsFeature.length > 1 &&
              newsFeature
                .slice(1)
                .map((feature) => (
                  <NewCardFeature key={feature.id} newFeature={feature} />
                ))}
          </div>
        </section>
        <section className="mt-[60px]">
          <div className="flex flex-row gap-4 items-center mb-8">
            {newCategories &&
              newCategories?.length > 0 &&
              newCategories.map((category) => (
                <div
                  key={category.id}
                  className={`text-2xl cursor-pointer ${
                    currentCategory === category.slug
                      ? "new-category text-primary-color"
                      : "text-[#666666]"
                  }`}
                  onClick={() => handleClickCategory(category.slug)}
                >
                  {category.name}
                </div>
              ))}
          </div>
          <div>
            <Row gutter={[32, 32]}>
              {!loadingNew &&
                news &&
                news.data?.length > 0 &&
                news.data.map((n) => (
                  <Col key={n.id} lg={6} md={24}>
                    <NewCardNormal news={n} />
                  </Col>
                ))}

              {loadingNew &&
                Array(8)
                  .fill(0)
                  .map((n, idx) => (
                    <Col key={idx} lg={6} md={24}>
                      <NewCardLoading />
                    </Col>
                  ))}
            </Row>
          </div>
        </section>
        {totalNew > 8 && (
          <section className="mt-8 mb-16 text-center">
            <Link href={`/thong-tin-xay-dung/${currentCategory}`}>
              <button className="text-white font-medium text-base h-[46px] w-[150px] rounded bg-primary-color">
                Xem tất cả
              </button>
            </Link>
          </section>
        )}
      </div>
    </>
  );
};
export async function getStaticProps() {
  // `getStaticProps` is executed on the server side.
  const newss = await fetchNewsForHome("/news");
  return {
    props: {
      newss: newss,
    },
  };
}

ThongTinXayDung.getLayout = function getLayout(page: ReactElement) {
  return (
    <>
      <MainLayout>{page}</MainLayout>
    </>
  );
};
export default ThongTinXayDung;
