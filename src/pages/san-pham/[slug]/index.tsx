import React, { useState } from "react";
import Head from "next/head";
import useSWR from "swr";
import Image from "next/image";
import { ReactElement } from "react";
import { useRouter } from "next/router";

import MainLayout from "@/components/main-layout";
import Breadcrums from "@/components/common/breadcrums";
import { NextPageWithLayout } from "../../_app";
import { ParsedUrlQuery } from "querystring";
import { GetStaticPaths, GetStaticPropsContext } from "next";
import {
  fetchCategorySlug,
  fetchChildsCategories,
  fetchRootCategories,
} from "src/lib/api/category";
import { ICategory } from "src/lib/types";
import {
  ProductTypes,
  FilterRelated,
  FilterCategories,
} from "@/components/common";
import { filterIcon, filterIconWhite } from "@/images/index";
import ListProduct from "@/components/products/ListProduct";
import { PaginationElement } from "@/components/common/index";

import {
  allProduct,
  camera,
  clockSafe,
  focusSystem,
  windowSystem,
  fire,
} from "src/images";

import {
  AllProductIcon,
  CameraSystemIcon,
  GuidanceSystemIcon,
  AccessSystemIcon,
  FireProtectionSystemIcon,
  SafetyLockIcon,
} from "@/images/icons/product_types/icon_wrapper";

type Props = {
  category: ICategory;
};

const PRODUCT_TYPES = [
  {
    id: 1,
    name: "Tất cả sản phẩm",
    icon: AllProductIcon,
  },
  {
    id: 2,
    name: "Hệ thống camera giám sát",
    icon: CameraSystemIcon,
  },
  {
    id: 3,
    name: "Hệ thống chỉ dẫn",
    icon: GuidanceSystemIcon,
  },
  {
    id: 4,
    name: "Hệ thống giám sát truy nhập",
    icon: AccessSystemIcon,
  },
  {
    id: 5,
    name: "Hệ thống phòng cháy chữa cháy",
    icon: FireProtectionSystemIcon,
  },
  {
    id: 6,
    name: "Khóa an toàn & Két",
    icon: SafetyLockIcon,
  },
];

const RELATED_LIST = [
  {
    id: 1,
    value: "Liên quan nhất",
  },
  {
    id: 2,
    value: "Sản phẩm mới",
  },
  {
    id: 3,
    value: "Lượt xem nhiều nhất",
  },
  {
    id: 4,
    value: "Lượt thích nhiều nhất",
  },
];

const ListCategoriesBySlug: NextPageWithLayout<Props> = (props: Props) => {
  const [isActiveFilterIcon, setIsActiveFilterIcon] = useState(false);

  const { query } = useRouter();
  const { slug } = query;

  const {
    data: category,
    error,
    isLoading,
  } = useSWR<ICategory | undefined>(slug, fetchCategorySlug);
  const breadcrumbs = [
    {
      title: "Sản phẩm",
      slug: "san-pham",
    },
    {
      slug: category?.slug || "",
      title: category?.name_vi || "",
    },
  ];

  const title = breadcrumbs.filter((bread) => bread.slug === slug)[0]?.title;

  const handleShowFilter = () => {
    console.log("click");
    setIsActiveFilterIcon((prev) => !prev);
  };

  return (
    <>
      <Head>
        <title>An ninh & An Toan</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="flex flex-col items-start px-4 lg:px-20 pt-8 pb-[60px]">
        <Breadcrums breadcrumbs={breadcrumbs} />
        <div className="mt-8">
          <h1 className="font-roboto not-italic font-medium text-2xl leading-[calc(36 / 24)] text-text-color">
            {title}
          </h1>
        </div>
        <ProductTypes productTypes={PRODUCT_TYPES} />
        <div className="w-full flex flex-col sm:flex-row justify-between mt-8">
          <FilterRelated defaultValue={1} options={RELATED_LIST} />
          <div
            className={`flex flex-row items-center px-4 py-3 rounded border border-[#e6e6e6] cursor-pointer group active:bg-[#eb7a01] transition ${
              isActiveFilterIcon ? "bg-[#eb7a01]" : ""
            }`}
            onClick={handleShowFilter}
          >
            <Image
              src={isActiveFilterIcon ? filterIconWhite : filterIcon}
              alt="filter icon"
              className="w-3 h-3"
            />
            <span
              className={`font-roboto not-italic font-medium text-base leading-[150%] text-[#333333] ml-3 group-active:text-white ${
                isActiveFilterIcon ? "text-white" : ""
              }`}
            >
              Bộ lọc
            </span>
          </div>
        </div>
        {isActiveFilterIcon && <FilterCategories />}
        <div className="mt-4 mb-4">
          <ListProduct />
        </div>
        <div className="w-full text-center">
          <PaginationElement />
        </div>
      </div>
    </>
  );
};

interface IParams extends ParsedUrlQuery {
  slug: string;
}
export const getStaticPaths: GetStaticPaths = async () => {
  const rootsCategories = await fetchRootCategories();
  const paths = rootsCategories.map((cate: ICategory) => ({
    params: { slug: cate.slug },
  }));

  return {
    paths: paths, //indicates that no page needs be created at build time
    fallback: "blocking", //indicates the type of fallback
  };
};

export async function getStaticProps(context: GetStaticPropsContext) {
  // `getStaticProps` is executed on the server side.
  const { slug } = context.params as IParams;

  const category = await fetchCategorySlug(slug);
  return {
    props: {
      category,
    },
  };
}

ListCategoriesBySlug.getLayout = function getLayout(page: ReactElement) {
  return (
    <>
      <MainLayout>{page}</MainLayout>
    </>
  );
};
export default ListCategoriesBySlug;
